// 抽象クラス

// 空のメソッドを作っておくと現時点で処理内容を確定できないメソッドなのか
// 何もしないメソッドなのか区別できない心配点の解消
詳細未定メソッド（抽象メソッド）を宣言
public abstract 戻り値　メソッド名（引数リスト）;

// 例）キャラクタークラスの場合
public class Character {
    ...
    public abstract void attack(Marango m);
}
// コンパイルにはクラスの宣言が必要
// abstractはあいまいという意味。{}さえつけずに
// abdtractがついたメソッドを抽象メソッドという。


// 未完成部分を含む継承専用クラスを誤ってnewされる心配の解消
抽象メソッドを含むクラスの宣言
public abstract class クラス名 {

}
//　abstractメソッドを含むクラスは必ずabstract付きクラスに
// しなければならない。忘れるとエラーになる。
// abstractがついたクラスを抽象クラスという。

// 抽象クラスはnewによるインスタンス化が禁止される。


// 職業の開発者が詳細未定のメソッドをオーバーライドし忘れる心配については
//　コンパイル時に抽象メソッドエラーが起きるため忘れる心配はない
// エラーの解決法
// ①職業クラスにabstractをつける（newできなくなる）
// ②攻撃クラスをオーバーライドし職業クラスの未完成部分をなくす

// 例）ダンサーを作成
public class Dancer extends Character {
    public void dance(){
        System.out.println(this.name + "は踊った！");
    }
    public void attack(Matango m){
        // キャラクタークラスの攻撃メソッドをオーバーライド
        System.out.println(this.name + "の攻撃");
        System.out.println("敵に３ポイントのダメージ");
        m.hp -= 3;
    }
}


// 多層階層の抽象継承構造
//  抽象クラスを継承した子クラスで全ての抽象メソッドをオーバーライドする必要はなく。
//  必要に応じて孫クラス、ひ孫クラスでオーバーライドすれば良い。この際全ての抽象メソッド
//  を実装していなければabstractをクラスから外すことはできず、newもできない

